{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://bioexcel.eu/biobb_mem/json_schemas/1.0/assign_leaflets",
    "name": "biobb_mem AssignLeaflets",
    "title": "Wrapper of the Lipyphilic AssignLeaflets module for assigning lipids to leaflets in a bilayer.",
    "description": "Lipyphilic is a Python package for analyzing MD simulations of lipid bilayers. The parameter names and defaults are the same as the ones in the official Lipyphilic documentation.",
    "type": "object",
    "info": {
        "wrapped_software": {
            "name": "Lipyphilic",
            "version": "0.10.0",
            "license": "other"
        },
        "ontology": {
            "name": "EDAM",
            "schema": "http://edamontology.org/EDAM.owl"
        }
    },
    "required": [
        "input_top_path",
        "input_traj_path",
        "output_leaflets_path"
    ],
    "properties": {
        "input_top_path": {
            "type": "string",
            "description": "Path to the input structure or topology file",
            "filetype": "input",
            "sample": "https://github.com/bioexcel/biobb_mem/raw/master/biobb_mem/test/data/LiPyphilic/system.tpr",
            "enum": [
                ".*\\.tpr$",
                ".*\\.gro$",
                ".*\\.pdb$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.tpr$",
                    "description": "Path to the input structure or topology file",
                    "edam": "format_2333"
                },
                {
                    "extension": ".*\\.gro$",
                    "description": "Path to the input structure or topology file",
                    "edam": "format_2033"
                },
                {
                    "extension": ".*\\.pdb$",
                    "description": "Path to the input structure or topology file",
                    "edam": "format_1476"
                }
            ]
        },
        "input_traj_path": {
            "type": "string",
            "description": "Path to the input trajectory to be processed",
            "filetype": "input",
            "sample": "https://github.com/bioexcel/biobb_mem/raw/master/biobb_mem/test/data/LiPyphilic/trajectory.xtc",
            "enum": [
                ".*\\.xtc$",
                ".*\\.trr$",
                ".*\\.tng$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.xtc$",
                    "description": "Path to the input trajectory to be processed",
                    "edam": "format_3875"
                },
                {
                    "extension": ".*\\.trr$",
                    "description": "Path to the input trajectory to be processed",
                    "edam": "format_3910"
                },
                {
                    "extension": ".*\\.tng$",
                    "description": "Path to the input trajectory to be processed",
                    "edam": "format_3876"
                }
            ]
        },
        "output_leaflets_path": {
            "type": "string",
            "description": "Path to the output leaflet assignments",
            "filetype": "output",
            "sample": "https://github.com/bioexcel/biobb_mem/raw/master/biobb_mem/test/reference/LiPyphilic/leaflets.csv",
            "enum": [
                ".*\\.csv$"
            ],
            "file_formats": [
                {
                    "extension": ".*\\.csv$",
                    "description": "Path to the output leaflet assignments",
                    "edam": "format_3752"
                }
            ]
        },
        "properties": {
            "type": "object",
            "properties": {
                "start": {
                    "type": "integer",
                    "default": null,
                    "wf_prop": false,
                    "description": "Starting frame for slicing."
                },
                "stop": {
                    "type": "integer",
                    "default": null,
                    "wf_prop": false,
                    "description": "Ending frame for slicing."
                },
                "step": {
                    "type": "integer",
                    "default": null,
                    "wf_prop": false,
                    "description": "Step for slicing."
                },
                "lipid_sel": {
                    "type": "string",
                    "default": "all",
                    "wf_prop": false,
                    "description": "Selection string for the lipids in a membrane. The selection should cover **all** residues in the membrane, including cholesterol."
                },
                "midplane_sel": {
                    "type": "string",
                    "default": null,
                    "wf_prop": false,
                    "description": "Selection string for residues that may be midplane. Any residues not in this selection will be assigned to a leaflet regardless of its proximity to the midplane. The default is `None`, in which case all lipids will be assigned to either the upper or lower leaflet."
                },
                "midplane_cutoff": {
                    "type": "number",
                    "default": 0.0,
                    "wf_prop": false,
                    "description": "Minimum distance in *z* an atom must be from the midplane to be assigned to a leaflet rather than the midplane. The default is `0`, in which case all lipids will be assigned to either the upper or lower leaflet. Must be non-negative."
                },
                "n_bins": {
                    "type": "integer",
                    "default": 1,
                    "wf_prop": false,
                    "description": "Number of bins in *x* and *y* to use to create a grid of membrane patches. Local membrane midpoints are computed for each patch, and lipids assigned a leaflet based on the distance to their local membrane midpoint. The default is `1`, which is equivalent to computing a single global midpoint."
                },
                "remove_tmp": {
                    "type": "boolean",
                    "default": true,
                    "wf_prop": true,
                    "description": "Remove temporal files."
                },
                "restart": {
                    "type": "boolean",
                    "default": false,
                    "wf_prop": true,
                    "description": "Do not execute if output files exist."
                },
                "sandbox_path": {
                    "type": "string",
                    "default": "./",
                    "wf_prop": true,
                    "description": "Parent path to the sandbox directory."
                }
            }
        }
    },
    "additionalProperties": false
}